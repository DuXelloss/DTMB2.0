function multipath_channel_filter = get_multipath_channel(channelType, isFading, DopplerFreq, maximumDelay, samplingRate, symbolRate);

%isFading : 0 : static channel, 1: rayleigh fading channel
%DopplerFreq : maximum doppler frequency for rayleigh fading chanel, valid when isFading == 1.
%maximumDelay (us): maximum echo delay of chanel 206, valid when channelType is 206.
%samplingRate (Hz): sampling rate, 30.4e6 Hz (30.4MHz) for chinese digital tv standard. 
%symbolRate (Hz): symbol rate, 7.56e6 Hz (7.56MHz) for chinese digital tv
%standard.

if (channelType == 101)
    pathGain = [-20.0; 0.0; -20.0; -10.0; -14.0; -18.0];
    pathDelay = 1.851851851851852 + [-1.8; 0.0; 0.15; 1.8; 5.7; 18.0];
    pathPhase = zeros(length(pathGain), 1);
elseif (channelType == 102)
    pathGain = [-18.0; 0.0; -20.0; -20.0; -10.0; -14.0];
    pathDelay = 1.851851851851852 + [-1.8; 0.0; 0.15; 1.8; 5.7; 30.0];
    pathPhase = zeros(length(pathGain), 1);
elseif (channelType == 103)    
    pathGain = [-20.0; 0.0; -14.0; -10.0; -20.0; -18.0];
    pathDelay = 1.851851851851852 + [-1.8; 0.0; 0.15; 1.8; 5.7; 18.0];
    pathPhase = zeros(length(pathGain), 1);
elseif (channelType == 104)    
    pathGain = [0.0; -10.0; -14.0; -18.0; -20.0; -20.0];
    pathDelay = [0.0; 0.2; 1.9; 3.9; 8.2; 15.0];
    pathPhase = zeros(length(pathGain), 1);   
elseif (channelType == 105)    
    pathGain = [-19.0; 0.0; -22.0; -17.0; -22.0; -19.0];
    pathDelay = 0.2 + [-0.2; 0.0; 0.08; 0.15; 0.3; 0.6];
    pathPhase = zeros(length(pathGain), 1);     
elseif (channelType == 106)    
    pathGain = [-10.0; -20.0; 0.0; -20.0; -10.0; -14.0];
    pathDelay = 18 + [-18; -1.8; 0.0; 0.15; 1.8; 5.7];
    pathPhase = zeros(length(pathGain), 1);     
elseif (channelType == 107)    
    pathGain = [-20.0; 0.0; -20.0; -10.0; 0.0; -18.0];
    pathDelay = 1.851851851851852 + [-1.8; 0.0; 0.15; 1.8; 5.7; 18.0];
    pathPhase = zeros(length(pathGain), 1);  
elseif (channelType == 108)    
    pathGain = [-18.0; 0.0; -20.0; -20.0; -10.0; 0.0];
    pathDelay = 1.851851851851852 + [-1.8; 0.0; 0.15; 1.8; 5.7; 30.0]; %1.8 + [-1.8; 0.0; 0.15; 1.8; 5.7; 30.0];
    pathPhase = zeros(length(pathGain), 1); %pi/4*ones(length(pathGain), 1);      
elseif (channelType == 1082)    
    pathGain = [-18.0; 0.0; -20.0; -20.0; -10.0; 0.0];
    pathDelay = 1.851851851851852 + [-1.8; 0.0; 0.15; 1.8; 5.7; 27.2]; %1.8 + [-1.8; 0.0; 0.15; 1.8; 5.7; 30.0];
    pathPhase = pi/4*ones(length(pathGain), 1);     
elseif (channelType == 109)    
    pathGain = [-5.1; 0.0; -3.9; -3.8; -2.5; -1.3];
    pathDelay = [0.07; 0.52; 0.60; 0.85; 2.75; 3.23];
    pathPhase = zeros(length(pathGain), 1);    
elseif (channelType == 110)    
    pathGain = [0.0; -0.5; -4.3; -4.4; -3.0; -1.8];
    pathDelay = [0.43; 0.52; 0.85; 1.37; 2.75; 3.23];
    pathPhase = zeros(length(pathGain), 1);     
elseif (channelType == 201)    % 201 : Brazil A 
    pathGain = [0.0; -13.8; -16.2; -14.9; -13.6; -16.4];
    pathDelay = [0.00; 0.15; 2.22; 3.05; 5.86; 5.93];
    pathPhase = zeros(length(pathGain), 1);
elseif (channelType == 202)    % 202 : Brazil B 
    pathGain = [0.0; -12.0; -4.0; -7.0; -15.0; -22.0];
    pathDelay = [0.00; 0.3; 3.5; 4.4; 9.5; 12.7];
    pathPhase = zeros(length(pathGain), 1);
elseif (channelType == 203)    % 203 : Brazil C 
    pathGain = [-2.8; 0.0; -3.8; -0.1; -2.5; -1.3];
    pathDelay = [0.00; 0.089; 0.419; 1.506; 2.322; 2.799];
    pathPhase = zeros(length(pathGain), 1);  
elseif (channelType == 204)    % 204 : Brazil D 
    pathGain = [-0.1; -3.8; -2.6; -1.3; 0.0; -2.8];
    pathDelay = [0.15; 0.63; 2.22; 3.05; 5.86; 5.93];
    pathPhase = zeros(length(pathGain), 1);    
elseif (channelType == 205)    % 205 : Brazil E 
    pathGain = [0.0; 0.0; 0.0];
    pathDelay = [0.0; 1.0; 2.0];
    pathPhase = zeros(length(pathGain), 1);     
elseif (channelType == 206)    % 206 : 2path 0dB echo channel 
    pathGain = [0.0; 0.0];
    pathDelay = [0.0; maximumDelay];  %135;
    pathPhase = pi/4*ones(length(pathGain), 1); 
elseif (channelType == 207)    % 207 : various path channel 
    pathGain = [-0.1; -3.8; -2.6; -1.3; 0.0; -2.8];
    pathDelay = [0.15; 0.63; 2.22; 3.05; 5.86; 5.93];
    pathGain = [pathGain; pathGain; pathGain; pathGain; pathGain; pathGain]; %; pathGain; pathGain;];
    pathDelay = [pathDelay; (pathDelay+6.0); (pathDelay+12.0); (pathDelay+18.0); (pathDelay+24.0); (pathDelay+30.0)]; %; (pathDelay+36.0); (pathDelay+40.0)];
    pathPhase = zeros(length(pathGain), 1); 
elseif (channelType == 301) % 301 : fading channel of the test standard.
    pathGain = [-3; 0; -2; -6; -8; -10];
    pathDelay = [0.0; 0.2; 0.5; 1.6; 2.3; 5];  %135;
    pathPhase = zeros(length(pathGain), 1);
elseif (channelType == 302) % 302 : low power precurser channel.
    pathGain = [-15; 0];
    pathDelay = [0.0; 15.0]; 
    pathPhase = zeros(length(pathGain), 1);    
elseif (channelType == 303) % 303 : fading test channel 3.
    pathGain = [-15; 0; 0; 0; -3; -20];
    pathDelay = [0.0; 15.0; 20; 21.2; 23.7; 25.9]; 
    pathPhase = zeros(length(pathGain), 1);    
elseif (channelType == 304) % 304 : rayleigh channel of the test standard.
    pathGain = [-12.9; -16.5; -25.8; -16.5; -15.3; -10.6; -7.8; -11.7; -13.1; -11.6; -12.4; -24.8; -24.2; -11.7; -18.7; -7.9; -10.4; -9.1; -14.7; -15.0];
    pathDelay = [0.073883; 0.143556; 0.153832; 0.194207; 0.203952; 0.429948; 0.518650; 0.602895; 0.640512; 0.848831; 0.924450; 1.003019; 1.016585; 1.368671; 1.381320; 1.935570; 2.751772; 3.228872; 3.324886; 5.422091]; 
    pathPhase = zeros(length(pathGain), 1);  %pi/4*ones(length(pathGain), 1);      
elseif (channelType == 305) % 305 : rice channel in the test standard.
    pathGain = [0;-24.3;-27.9;-27.9;-26.7;-22.0;-19.2;-23.1;-24.5;-23.0;-23.8;-36.2;-35.6;-23.1;-30.1;-19.3;-21.8;-20.5;-26.1;-26.4];
    pathDelay = [0; 0.073883; 0.143556; 0.194207; 0.203952; 0.429948; 0.518650; 0.602895; 0.640512; 0.848831; 0.924450; 1.003019; 1.016585; 1.368671; 1.381320; 1.935570; 2.751772; 3.228872; 3.324886; 5.422091];
    pathPhase = zeros(length(pathGain), 1);
elseif (channelType == 401) % 401 : real channel from FIT building.
    pathGain = -[0;4.8;4;4;0.28;6.8;14;10;2.6;6;0.2;6;12;16;14;12;16;18;20];
    pathDelay = [0;0.13;0.27;0.4;0.53;0.66;0.79;0.92;1.06;1.19;1.32;1.59;1.85;2.25;2.91;3.77;4.63;14.5;14.8];
    pathPhase = zeros(length(pathGain), 1);  
elseif (channelType == 402) % 402 : real channel2 from FIT building.
    pathGain = -[0;4.8;4;4;5.28;6.8;14;10;2.6;6;5.2;6;12;16;14;12;16;18;20];
    pathDelay = [0;0.13;0.27;0.4;0.53;0.66;0.79;0.92;1.06;1.19;1.32;1.59;1.85;2.25;2.91;3.77;4.63;14.5;14.8];
    pathPhase = zeros(length(pathGain), 1);    
elseif (channelType == 403) % 403 : real channel3 from FIT building.    
  pathGain = [ ...  
  0.007466141821989 - 0.003347073168404i
 -0.003436992924260 + 0.015942356093694i
 -0.004504450695150 - 0.000885034282752i
 -0.002209459409872 + 0.003093059691330i
  0.001690354649101 + 0.006191726922094i
  0.002346997779337 + 0.000714907977003i
  0.012605088521208 - 0.000865788694275i
 -0.004723560894224 + 0.000787984350198i
  0.007047492229252 - 0.008492812658646i
 -0.001490807082380 - 0.009190988299206i
 -0.019950032903593 - 0.016357407874151i
  0.006686213447897 - 0.006171063004258i
 -0.003012420231192 + 0.001531666305748i
 -0.009522900194643 + 0.000028113390504i
 -0.004179044141105 + 0.004706667435063i
 -0.014219463479950 - 0.001180646584313i
  0.309872481586874 + 0.785896284131912i
  1.250548440586430 + 2.530057564455972i
 -0.179796284155996 + 0.486049838315892i
  0.432401462887912 + 0.544759358334392i
  1.849273913471654 + 1.142259216873639i
 -0.130697444165073 - 1.373040341274886i
 -0.327049176756693 + 0.561439661658718i
 -0.317988892281048 + 0.090236488434595i
  0.336380455037505 - 0.274429064015043i
 -0.260528177508706 - 0.093400765992494i
 -0.254059260617683 + 0.408588323729540i
  0.396515105023769 - 1.288302067556257i
  0.186520378561108 - 1.070751303112956i
  0.914834996568230 + 0.504498679122741i
 -0.255761846752900 + 0.222664384918824i
 -0.169249152288609 + 0.068962402376936i
 -0.064634307590315 + 0.065306596665996i
 -0.096370225083723 + 0.143434942905729i
  0.217794278461903 - 0.101957000304556i
 -0.110234487952074 + 0.024154817339096i
 -0.046041730345318 - 0.071966637549263i
 -0.008185215664071 + 0.008748845045022i
 -0.029670516104036 - 0.092208243724949i
 -0.001442121765388 - 0.161283018750939i
  0.224633103324802 - 0.008822861781166i
  0.108224398829720 + 0.055219051269113i
 -0.049834579731989 - 0.065346725118624i
 -0.027949277121262 + 0.202110734565789i
  0.053369240130372 - 0.007086594056940i
 -0.047760314113142 - 0.020221041178320i
 -0.003815212751741 + 0.017049964153169i
  0.061038316473200 - 0.000930690714470i
  0.006781478046083 - 0.046357073379367i
 -0.151718945517090 - 0.119241698845072i
 -0.115008908107695 - 0.085480087657104i
 -0.014328162451551 + 0.160495220659617i
  0.045371451549458 - 0.234283852426817i
 -0.019541925459215 + 0.014765253496340i
  0.000305585396381 - 0.012755051712764i
  0.015274320357922 + 0.056693616559655i
  0.000858329539045 + 0.024098653230295i
  0.048157473029975 - 0.026106933420627i
 -0.013080122203928 + 0.175399229550608i
 -0.064302657224513 - 0.012488389245243i
  0.015353795876047 - 0.023827176467206i
 -0.023229642159256 + 0.062897452576477i
 -0.082765175173191 - 0.014870085187011i
  0.017328031226994 - 0.014669758352027i
 -0.011619409971702 - 0.017888706471648i
  0.047565062987043 + 0.074223862677474i
 -0.005647629407430 - 0.002238412931195i
  0.027850861573751 - 0.015999348544540i
  0.048700720713715 - 0.006638018743153i
 -0.160327113306100 - 0.024702070869099i
  0.008929152532936 - 0.003372245650027i
  0.004780756506673 - 0.046916508456921i
 -0.093108024830992 - 0.015204110885346i
  0.022857223094812 - 0.036608141477175i
  0.012898826234417 + 0.035258740944070i
  0.009918475844862 - 0.010761835199397i
 -0.009992054638120 - 0.005747738704807i
  0.017319575328210 - 0.025568749743690i
 -0.046040982253716 - 0.033384040183475i
  0.011153196582430 + 0.002155039406170i
 -0.009303809758921 - 0.006124889386042i
 -0.011104075167388 - 0.005080664380757i
  0.010043364214158 - 0.020962473023008i
  0.013705877509503 + 0.060937304611615i
  0.026743279268560 + 0.009948062512165i
  0.004111943076935 - 0.001961365102317i
 -0.010637688859770 + 0.007836597924041i
  0.012204931725070 - 0.013394081033657i
  0.003764793267823 + 0.004765868426765i
  0.004661617108800 + 0.001056922909029i
 -0.018541858846168 + 0.021343158869396i
  0.017002443747231 - 0.044021173085161i
 -0.003353047652808 + 0.007916335346281i
  0.001194116083166 + 0.003773547124762i
 -0.000473457891917 - 0.011775820900635i
 -0.029207329392816 + 0.014482857804649i
 -0.002868779324280 + 0.000106952585323i
 -0.012743967949440 - 0.000888883699775i
 -0.008951887959814 - 0.008458872021567i
 -0.009508259511181 + 0.047217662824576i
  0.009485905170692 + 0.005814644352948i
  0.006764183625954 + 0.039394875979031i
  0.011807039810368 + 0.025645698268147i
  0.000930769938893 - 0.004945532429188i
  0.003696724248624 - 0.006496832678821i
  0.003040468924413 - 0.004709234888518i
  0.019050652550486 - 0.031334054027300i
 -0.009230282605089 + 0.007209485156899i
  0.000074913188462 + 0.011477678521573i
  0.015537943169288 + 0.014771052074615i
  0.047391845980783 + 0.033345341220938i
 -0.001114584524615 - 0.007052656883452i
  0.008045185083678 + 0.057364870345079i
  0.064414944033577 + 0.062502166863246i
 -0.008455611081781 - 0.009829298818992i
  0.013204551421698 + 0.017166270028303i
  0.004897476023149 - 0.005311379085980i
  0.014352588864141 + 0.008929838908925i
  0.000484818208950 - 0.005151822236588i
  0.013907904514535 - 0.014190414693860i
 -0.000863675751611 - 0.007633402724573i
 -0.009758251722990 - 0.003122556835141i
  0.009228887216071 - 0.006674191288441i
  0.008849559420115 - 0.001073827111979i
 -0.002980107598744 - 0.001021219313754i
 -0.012623519141623 + 0.000798560541166i
 -0.005258556273271 + 0.010244520762922i
  0.088365534636924 + 0.085845410862716i
  0.138157460883621 + 0.100013449997155i
 -0.068893009490322 - 0.030777414817988i
  0.063980725142629 - 0.022920487072427i
  0.004203114647706 + 0.014203403747068i
  0.016117653989545 + 0.009028059621507i
  0.003758334778310 + 0.006472809627742i
 -0.011127774847546 + 0.001435021465415i
 -0.002324643068877 + 0.004516240314306i
  0.002530973933115 + 0.002083915601291i
 -0.005488012265183 + 0.007335383647329i
  0.000534034673474 - 0.004367137597554i
  0.004018590584468 - 0.007680166271300i
 -0.013905450050357 - 0.001409949386283i
 -0.005214204885381 + 0.005774380306265i
 -0.000134491903034 + 0.008490034608971i
 -0.007004421977438 - 0.000207071570889i];

    pathPhase = angle(pathGain);
    pathGain = 20*log10(abs(pathGain));
    pathDelay = (1:length(pathGain)).'/symbolRate*1e6;
end

if (isFading == 1)
    Ts = 1/samplingRate;
    pathDelay = round(pathDelay * 1e-6 * symbolRate)/symbolRate;
%     pathDelay = pathDelay * 1e-6;
    pathDelay = pathDelay.';
    pathGain = pathGain.';
    multipath_channel_filter = rayleighchan(Ts,DopplerFreq,pathDelay,pathGain);
    multipath_channel_filter.ResetBeforeFiltering = 0;
else
    maxPathDelay = round(pathDelay(end) * 1e-6 * samplingRate);
    multipath_channel_filter = zeros(maxPathDelay, 1);
    pathDelayNum = round(pathDelay * 1e-6 * samplingRate);
    multipath_channel_filter(pathDelayNum+1, 1) = 10.^(pathGain/20) .* exp(sqrt(-1)*pathPhase);
    multipath_channel_filter = multipath_channel_filter / norm(multipath_channel_filter); 
end
% multipath_channel_filter_rev = conj(multipath_channel_filter(end:-1:1));
% multipath_channel_filter = conv(multipath_channel_filter, multipath_channel_filter_rev);